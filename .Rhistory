2+2
c(1,2) %*% c(3,3)
c(1,2) * c(3,3)
data()
filhos = c(0, 0, 1, 2)
tabela = table(filhos)
tabela
class(filhos)
class(tabela)
source('F:/Rafael/Projetos/R/IC lista 2.R', encoding = 'UTF-8')
source('F:/Rafael/Projetos/R/IC lista 2.R', encoding = 'UTF-8')
source('F:/Rafael/Projetos/R/IC lista 2.R', encoding = 'UTF-8')
source('F:/Rafael/Projetos/R/IC lista 2.R', encoding = 'UTF-8')
source('F:/Rafael/Projetos/R/IC lista 2.R', encoding = 'UTF-8')
source('F:/Rafael/Projetos/R/IC lista 2.R', encoding = 'UTF-8')
source('F:/Rafael/Projetos/R/IC lista 2.R', encoding = 'UTF-8')
source('F:/Rafael/Projetos/R/IC lista 2.R', encoding = 'UTF-8')
source('F:/Rafael/Projetos/R/IC lista 2.R', encoding = 'UTF-8')
source('F:/Rafael/Projetos/R/IC lista 2.R', encoding = 'UTF-8')
source('F:/Rafael/Projetos/R/IC lista 2.R', encoding = 'UTF-8')
source('F:/Rafael/Projetos/R/IC lista 2.R', encoding = 'UTF-8')
source('F:/Rafael/Projetos/R/IC lista 2.R', encoding = 'UTF-8')
source('F:/Rafael/Projetos/R/IC lista 2.R', encoding = 'UTF-8')
source('F:/Rafael/Projetos/R/IC lista 2.R', encoding = 'UTF-8')
source('F:/Rafael/Projetos/R/IC lista 2.R', encoding = 'UTF-8')
source('F:/Rafael/Projetos/R/IC lista 2.R', encoding = 'UTF-8')
source('F:/Rafael/Projetos/R/IC lista 2.R', encoding = 'UTF-8')
source('F:/Rafael/Projetos/R/IC lista 2.R', encoding = 'UTF-8')
source('F:/Rafael/Projetos/R/IC lista 2.R', encoding = 'UTF-8')
source('F:/Rafael/Projetos/R/IC lista 2.R', encoding = 'UTF-8')
source('F:/Rafael/Projetos/R/IC lista 2.R', encoding = 'UTF-8')
source('F:/Rafael/Projetos/R/IC lista 2.R', encoding = 'UTF-8')
source('F:/Rafael/Projetos/R/IC lista 2.R', encoding = 'UTF-8')
source('F:/Rafael/Projetos/R/IC lista 2.R', encoding = 'UTF-8')
source('F:/Rafael/Projetos/R/IC lista 2.R', encoding = 'UTF-8')
source('F:/Rafael/Projetos/R/IC lista 2.R', encoding = 'UTF-8')
source('F:/Rafael/Projetos/R/IC lista 2.R', encoding = 'UTF-8')
source('F:/Rafael/Projetos/R/IC lista 2.R', encoding = 'UTF-8')
source('F:/Rafael/Projetos/R/IC lista 2.R', encoding = 'UTF-8')
source('F:/Rafael/Projetos/R/IC lista 2.R', encoding = 'UTF-8')
source('F:/Rafael/Projetos/R/IC lista 2.R', encoding = 'UTF-8')
source('F:/Rafael/Projetos/R/IC lista 2.R', encoding = 'UTF-8')
source('F:/Rafael/Projetos/R/IC lista 2.R', encoding = 'UTF-8')
vecWords
dtm = data.frame()
dtm$teste
if (NULL)
print(sim)
if (NULL == NULL)
print(sim)
if (is.null(NULL))
print("sim")
teste = data.frame
teste
print(teste)
View(teste)
View(teste)
teste = data.frame()
teste
teste[["arroz"]] = 0
teste
rbind(a=0,b=1)
teste
rbind(data.frame(a=0,b=1))
teste
rbind(teste, data.frame(a=0,b=1))
teste
rbind(teste, data.frame(a=0,b=1))
teste
rbind(teste, data.frame(c(0,1)))
teste
teste = rbind(teste, data.frame(a=0,b=1))
teste
teste = rbind(teste, data.frame(a=2,b=2))
teste
teste = rbind(teste, data.frame(b=2,c=2))
teste[["c"]] = 0
teste
d = "d"
teste[[d]] = 0
teste
source('F:/Rafael/Projetos/R/IC lista 2.R', encoding = 'UTF-8')
a= vector()
a
print(a)
a = c(a, 1)
a
a = c(a, 1)
a
source('F:/Rafael/Projetos/R/IC lista 2.R', encoding = 'UTF-8')
vecWords
vecWords = 1
vecWords
source('F:/Rafael/Projetos/R/IC lista 2.R', encoding = 'UTF-8')
vecWords
dtm
is.null(dtm)
nrow(dtm)
dtm
dtm[['a']] = 0
dtm = dtm[['a']] = 0
dtm
dtm.rbind()
rbind(dtm)
dtm = rbind(dtm)
dtm
dtm = rbind(dtm, 'a')
dtm
dtm$X.a.
dtm = data.frame()
dtm
dtm = dtm.rbind(dtm, 'a' = 'b')
dtm = dtm.rbind(dtm, ['a'] = 'b')
dtm = data.frame('a')
dtm
dtm = data.frame('b')
dtm
dtm = data.frame(teste = 'teste')
dtm
dtm[['a']] = 1
dtm
dtm[['b']]
dtm[['a']] = dtm[['a']] + 1
dtm[['b']]
dtm
dtm[1, 'a']
dtm = data.frame(a='a',b='b',c='c')
dtm
dtm = dtm.rbind(dtm, data.frame(b='x'))
dtm = rbind(dtm, data.frame(b='x'))
dtm = rbind(dtm, data.frame(b='x'))
dtm = data.frame(a='a',b='b',c='c')
dtm
dtm2 = dtm
dtm2
dtm[1, 1] = 'x'
dtm[1, 'a'] = 'x'
dtm[1,'a'] = 'x'
dtm
dtm2
dtm2[1,]
source('F:/Rafael/Projetos/R/IC lista 2.R', encoding = 'UTF-8')
source('F:/Rafael/Projetos/R/IC lista 2.R', encoding = 'UTF-8')
source('F:/Rafael/Projetos/R/IC lista 2.R', encoding = 'UTF-8')
paste(c('abc','cde'), sep=" ")
paste(c('abc','cde'), sep="")
paste0(c('abc','cde'), sep="")
paste(c('abc','cde'), sep = " ")
cat(c('abc','cde'), sep = " ")
source('F:/Rafael/Projetos/R/IC lista 2.R', encoding = 'UTF-8')
source('F:/Rafael/Projetos/R/IC lista 2.R', encoding = 'UTF-8')
source('F:/Rafael/Projetos/R/IC lista 2.R', encoding = 'UTF-8')
source('F:/Rafael/Projetos/R/IC lista 2.R', encoding = 'UTF-8')
source('F:/Rafael/Projetos/R/IC lista 2.R', encoding = 'UTF-8')
source('F:/Rafael/Projetos/R/IC lista 2.R', encoding = 'UTF-8')
source('F:/Rafael/Projetos/R/IC lista 2.R', encoding = 'UTF-8')
allWords
dtm
View(dtm)
dtm[,-'dummyCol']
dtm[,'dummyCol']
dtm
dtm$dummyCol = NULL
dtm
source('F:/Rafael/Projetos/R/IC lista 2.R', encoding = 'UTF-8')
vecTexts
dtm
dtm[-1,]
data.frame(dtm[-1,])
dtm
dtm = dtm[-1,]
dtm
rownames(dtm) = 1:10
dtm
rownames(dtm) = 2:11
rownames(dtm) = 2:12
rownames(dtm) = 2:11
dtm
nrows(dtm)
nrow(dtm)
source('F:/Rafael/Projetos/R/IC lista 2.R', encoding = 'UTF-8')
dtm
source('F:/Rafael/Projetos/R/IC lista 2.R', encoding = 'UTF-8')
dtm
source('F:/Rafael/Projetos/R/IC lista 2.R', encoding = 'UTF-8')
source('F:/Rafael/Projetos/R/IC lista 2.R', encoding = 'UTF-8')
as.matrix(dtm)
dolSums(as.matrix(dtm))
colSums(dtm)
source('F:/Rafael/Projetos/R/IC lista 2.R', encoding = 'UTF-8')
source('F:/Rafael/Projetos/R/IC lista 2.R', encoding = 'UTF-8')
source('F:/Rafael/Projetos/R/IC lista 2.R', encoding = 'UTF-8')
source('F:/Rafael/Projetos/R/IC lista 2.R', encoding = 'UTF-8')
source('F:/Rafael/Projetos/R/IC lista 2.R', encoding = 'UTF-8')
hist(termFrequencies)
hist(termFrequencies, x = allWords)
hist(as.vector(termFrequencies))
vec = as.vector(termFrequencies)
vec
hist(vec, x = vec)
hist(vec, freq = TRUE)
hist(vec, freq = FALSE)
hist(vec, freq = TRUE)
plot(allWords, termFrequencies)
barplot(termFrequencies)
termFrequencies = colSums(dtm)
orderedTermFrequencies = sort(termFrequencies, decreasing = TRUE)
print("Term frequencies (ordered by most frequent):")
print(orderedTermFrequencies)
# Histograma das frequências de palavras
hist(termFrequencies)
barplot(termFrequencies)
termFrequencies[1,]>=40
termFrequencies[1,]
termFrequencies
class(termFrequencies)
termFrequencies
termFrequencies[termFrequencies>2]
termFrequencies[termFrequencies>1]
termFrequencies[termFrequencies>40]
moreThen40Terms = termFrequencies[termFrequencies>=40]
moreThen40Terms
# Histograma das frequências das frequências de termos
hist(moreThen40Terms)
# Histograma da frequências de cada termo
barplot(moreThen40Terms)
moreThen40Terms = termFrequencies[termFrequencies>=2]
# Histograma das frequências das frequências de termos
hist(moreThen40Terms)
# Histograma da frequências de cada termo
barplot(moreThen40Terms)
moreThen40Terms = termFrequencies[termFrequencies>=40]
# Histograma das frequências das frequências de termos
hist(moreThen40Terms)
# Histograma da frequências de cada termo
barplot(moreThen40Terms)
wordcloud(termFrequencies)
#install.packages("twitteR")
#install.packages("stringr")
#install.packages("RTextTools")
#install.packages("tm")
install.packages("SnowballC")
library(SnowballC)
#install.packages("twitteR")
#install.packages("stringr")
#install.packages("RTextTools")
#install.packages("tm")
install.packages("wordcloud")
library(wordcloud)
wordcloud(termFrequencies)
wordcloud(tdm)
wordcloud(dtm)
wordcloud(termFrequencies, colors=c(3,4),random.color=FALSE, d$freq, min.freq=80)
wordcloud(termFrequencies, colors=c(3,4),random.color=FALSE, termFrequencies, min.freq=80)
wordcloud(dtm, colors=c(3,4),random.color=FALSE, dtm, min.freq=80)
wordcloud(allWords, colors=c(3,4),random.color=FALSE, allWords, min.freq=80)
wordcloud(termFrequencies, colors=c(3,4),random.color=FALSE, termFrequencies, min.freq=80)
wordcloud(allWords, termFrequencies)
source('F:/Rafael/Projetos/R/IC lista 2.R', encoding = 'UTF-8')
source('F:/Rafael/Projetos/R/IC lista 2.R', encoding = 'UTF-8')
wordcloud(allWords, termFrequencies)
# Histograma das frequências das frequências de termos
hist(moreThen40Terms)
# Histograma da frequências de cada termo
barplot(moreThen40Terms)
moreThen20Terms
termFrequencies
rownames(termFrequencies)
row.names(termFrequencies)
rownames(termFrequencies)
rownames(termFrequencies)
termFrequencies
as.data.frame(termFrequencies)
rownames(as.data.frame(termFrequencies))
as.vector(termFrequencies)
as.list(termFrequencies)
names(as.list(termFrequencies))
wordcloud(names(as.list(moreThen20Terms)), moreThen20Terms)
moreThen20Terms = termFrequencies[termFrequencies>=2]
wordcloud(names(as.list(moreThen20Terms)), moreThen20Terms)
names(as.list(moreThen20Terms)
)
moreThen20Terms
moreThen20TermNames = names(as.list(moreThen20Terms))
# Wordclou
wordcloud(moreThen20TermNames, moreThen20Terms)
# Wordclou
wordcloud(moreThen20TermNames, moreThen20Terms)
# Wordcloud of terms with more then 20 frequency
wordcloud(moreThen20TermNames, moreThen20Terms, colors=c(3,4),random.color=FALSE)
# Wordcloud of terms with more then 20 frequency
wordcloud(moreThen20TermNames, moreThen20Terms, colors=c(3,4),random.color=FALSE)
# Wordcloud of terms with more then 20 frequency
wordcloud(moreThen20TermNames, moreThen20Terms, colors=1:10,random.color=FALSE)
# Wordcloud of terms with more then 20 frequency
wordcloud(moreThen20TermNames, moreThen20Terms, colors=1:10,random.color=FALSE)
# Wordcloud of terms with more then 20 frequency
wordcloud(moreThen20TermNames, moreThen20Terms, colors=1:20,random.color=FALSE)
# Wordcloud of terms with more then 20 frequency
wordcloud(moreThen20TermNames, moreThen20Terms, colors=1:20,random.color=FALSE)
# Wordcloud of terms with more then 20 frequency
wordcloud(moreThen20TermNames, moreThen20Terms, colors=1:50,random.color=FALSE)
# Wordcloud of terms with more then 20 frequency
wordcloud(moreThen20TermNames, moreThen20Terms, colors=1:5,random.color=FALSE)
# Wordcloud of terms with more then 20 frequency
wordcloud(moreThen20TermNames, moreThen20Terms, colors=1:5,random.color=FALSE)
# Wordcloud of terms with more then 20 frequency
wordcloud(moreThen20TermNames, moreThen20Terms, colors=1:10,random.color=FALSE)
# Wordcloud of terms with more then 20 frequency
wordcloud(moreThen20TermNames, moreThen20Terms, colors=1:10,random.color=FALSE)
# Wordcloud of terms with more then 20 frequency
wordcloud(moreThen20TermNames, moreThen20Terms, colors=1:10, random.color=TRUE)
# Wordcloud of terms with more then 20 frequency
wordcloud(moreThen20TermNames, moreThen20Terms, colors=1:10, random.color=TRUE)
findAssocs(dtm, "our", corlimit=0.60)
findAssocs(dtm, "polít", corlimit=0.60)
docs_tm = tm_map(vecTexts, PlainTextDocument)
docs_tm = VCorpus(VectorSource(vecTexts))
dtm_tm = DocumentTermMatrix(docs_tm)
dtm_tm
findAssocs(dtm_tm, "polít", corlimit=0.60)
findAssocs(dtm_tm, "ouro", corlimit=0.60)
findAssocs(dtm_tm, "our", corlimit=0.60)
a = wordStem("ouro", language = "portuguese")
a
findAssocs(dtm_tm, "polít", corlimit=0.60)
dtm_tm_notSparce = removeSparseTerms(dtm, 0.15)
dtm_tm_notSparce = removeSparseTerms(dtm_tm, 0.15)
#install.packages("twitteR")
#install.packages("stringr")
#install.packages("RTextTools")
#install.packages("tm")
#install.packages("wordcloud")
install.packages("cluster")
library(cluster)
distanceWords = dist(t(dtm_tm_notSparce), method="euclidian")
distanceWords
dtm_tm_notSparce
dtm_tm
distanceWords = dist(t(dtm_tm), method="euclidian")
distanceWords
fit <- hclust(d=distanceWords, method="complete")
plot(fit, hang=-1)
# From the dendrogram above, we find appr 9 clusters to be a good number
groups <- cutree(fit, k=9)
rect.hclust(fit, k=9, border="red")
#install.packages("twitteR")
#install.packages("stringr")
#install.packages("RTextTools")
#install.packages("tm")
#install.packages("wordcloud")
#install.packages("cluster")
install.packages("fpc")
library(fpc)
kMeansFit = kmeans(distanceWords, 9)
clusplot(as.matrix(distanceWords), kMeansFit$cluster, color=T, shade=T, labels=2, lines=0)
kMeansFit = kmeans(distanceWords, 2)
clusplot(as.matrix(distanceWords), kMeansFit$cluster, color=T, shade=T, labels=2, lines=0)
kMeansFit = kmeans(distanceWords, 9)
clusplot(as.matrix(distanceWords), kMeansFit$cluster, color=T, shade=T, labels=2, lines=0)
kMeansFit = kmeans(distanceWords, 8)
clusplot(as.matrix(distanceWords), kMeansFit$cluster, color=T, shade=T, labels=2, lines=0)
kMeansFit = kmeans(distanceWords, 9)
clusplot(as.matrix(distanceWords), kMeansFit$cluster, color=T, shade=T, labels=2, lines=0)
source('F:/Rafael/Projetos/R/IC lista 2.R', encoding = 'UTF-8')
# K-means clusters
kMeansFit = kmeans(distanceWords, 9)
clusplot(as.matrix(distanceWords), kMeansFit$cluster, color=T, shade=T, labels=2, lines=0)
# Draw the dendrogram
plot(fit, hang=-1)
# From the dendrogram above, we find appr 9 clusters to be a good number
groups <- cutree(fit, k=9)
# Draw the boxes to adequate to clearly see the clusters
rect.hclust(fit, k=9, border="red")
source('F:/Rafael/Projetos/R/IC lista 2.R', encoding = 'UTF-8')
source('F:/Rafael/Projetos/R/IC lista 2.R', encoding = 'UTF-8')
